package hexlet.copy;

public class Car {
    int speed;
    
    public static void main(String... args) {
        Car ta4ka = new Car(); 

        System.out.println("speed heap: " + ta4ka.speed); 

        ta4ka.setSpeed(12); //Вызываем конкретную функцию (метод) из новосозданого объекта
                            //Значение (12) хранится в фрейме (стек) в переменной newSpeed (параметр/аргумент)
    }

    public void showSpeed() {    //выводит значение из хипа по ссылке this
        System.out.println("speed heap: " + this.speed);
    }

    public void setSpeed(int newSpeed) { //принимаем значение 12
        this.speed = newSpeed; //записываем по ссылке в хип, теперь speed = 12
        showSpeed();//показываем
        newSpeed = 8;//записали новое значение в стеке
        System.out.println("newSpeed frame: " + newSpeed);
        speed = 3; //В стеке нет такой переменной, потому она будет записана в хип!
        showSpeed();
        setSetSpeed(newSpeed);//передаем значение newSpeed = 8 

    }

    public void setSetSpeed(int speed) { //теперь и в стеке есть своя переменная speed !!! speed = 8
    	showSpeed(); //speed в хипе = 3
        System.out.println("speed frame: " + speed);
        this.speed = speed;//присваиваем значение speed из фрейма значению speed в хипе! было 3, стало 8
        showSpeed(); //показываем speed из хипа.

    }
    
    
}

/*Переменная static int speed находится на уровне объекта(в данном случае на уровне класса - static). И хранится она в хипе(куче).

А вот переменная int speed объявленная в аргументах метода setSetSpeed - хранится в фрейме метода на стеке. 
И, по сути, видна только этому методу. И эта переменная будет равна тому значению, которое мы передали в метод setSetSpeed. 
Это разные переменные, не смотря на одинаковые имена. У них разная зона видимости.

static int speed - видна всему классу.
int speed - видна только внутри метода setSetSpeed. Ее вообще можно было назвать int otherSpeed, 
но боюсь тогда сложнее будет объяснить разницу между хипом и стеком.
Но метод видит обе переменные. И для того, что бы джава понимала какую переменную мы хотим потрогать - мы пишем ее имя:

просто speed, если это переменная в рамках метода, в котором мы сейчас находимся.
или this.speed если мы хотим обратится к обще-класовой переменной (к полю объекта).
Слово this относится только к тому классу в котором оно применено. 
Это ссылка на текущий объект не зависимо от того, как он называется. 
В данном случае у нас объект называется car или ta4ka, или еще как - но this будет ссылаться именно на тот объект в котором написано. 
А объект (или static class) храняться в куче(хипе).*/